// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package db

import (
	"context"
	"time"
)

const createCharacter = `-- name: createCharacter :one
INSERT INTO characters (id, owner_id, claimed_timestamp, idx, character_id, level, xp, personality, shiny, iv_hp, iv_atk, iv_def, iv_sp_atk, iv_sp_def, iv_spd, iv_total, nickname, favourite, held_item, moves, color)
VALUES (uuid_generate_v4(), $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20)
RETURNING id, owner_id, claimed_timestamp, idx, character_id, level, xp, personality, shiny, iv_hp, iv_atk, iv_def, iv_sp_atk, iv_sp_def, iv_spd, iv_total, nickname, favourite, held_item, moves, color
`

type createCharacterParams struct {
	OwnerID          string    `json:"owner_id"`
	ClaimedTimestamp time.Time `json:"claimed_timestamp"`
	Idx              int32     `json:"idx"`
	CharacterID      int32     `json:"character_id"`
	Level            int32     `json:"level"`
	Xp               int32     `json:"xp"`
	Personality      string    `json:"personality"`
	Shiny            bool      `json:"shiny"`
	IvHp             int32     `json:"iv_hp"`
	IvAtk            int32     `json:"iv_atk"`
	IvDef            int32     `json:"iv_def"`
	IvSpAtk          int32     `json:"iv_sp_atk"`
	IvSpDef          int32     `json:"iv_sp_def"`
	IvSpd            int32     `json:"iv_spd"`
	IvTotal          float64   `json:"iv_total"`
	Nickname         string    `json:"nickname"`
	Favourite        bool      `json:"favourite"`
	HeldItem         int32     `json:"held_item"`
	Moves            []int32   `json:"moves"`
	Color            int32     `json:"color"`
}

func (q *Queries) createCharacter(ctx context.Context, arg createCharacterParams) (Character, error) {
	row := q.db.QueryRow(ctx, createCharacter,
		arg.OwnerID,
		arg.ClaimedTimestamp,
		arg.Idx,
		arg.CharacterID,
		arg.Level,
		arg.Xp,
		arg.Personality,
		arg.Shiny,
		arg.IvHp,
		arg.IvAtk,
		arg.IvDef,
		arg.IvSpAtk,
		arg.IvSpDef,
		arg.IvSpd,
		arg.IvTotal,
		arg.Nickname,
		arg.Favourite,
		arg.HeldItem,
		arg.Moves,
		arg.Color,
	)
	var i Character
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.ClaimedTimestamp,
		&i.Idx,
		&i.CharacterID,
		&i.Level,
		&i.Xp,
		&i.Personality,
		&i.Shiny,
		&i.IvHp,
		&i.IvAtk,
		&i.IvDef,
		&i.IvSpAtk,
		&i.IvSpDef,
		&i.IvSpd,
		&i.IvTotal,
		&i.Nickname,
		&i.Favourite,
		&i.HeldItem,
		&i.Moves,
		&i.Color,
	)
	return i, err
}

const getCharactersForUser = `-- name: getCharactersForUser :many
SELECT id, owner_id, claimed_timestamp, idx, character_id, level, xp, personality, shiny, iv_hp, iv_atk, iv_def, iv_sp_atk, iv_sp_def, iv_spd, iv_total, nickname, favourite, held_item, moves, color FROM characters WHERE owner_id = $1
`

func (q *Queries) getCharactersForUser(ctx context.Context, ownerID string) ([]Character, error) {
	rows, err := q.db.Query(ctx, getCharactersForUser, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Character
	for rows.Next() {
		var i Character
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.ClaimedTimestamp,
			&i.Idx,
			&i.CharacterID,
			&i.Level,
			&i.Xp,
			&i.Personality,
			&i.Shiny,
			&i.IvHp,
			&i.IvAtk,
			&i.IvDef,
			&i.IvSpAtk,
			&i.IvSpDef,
			&i.IvSpd,
			&i.IvTotal,
			&i.Nickname,
			&i.Favourite,
			&i.HeldItem,
			&i.Moves,
			&i.Color,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
