version: '3.9'

services:
  # The main application service for the Discord bot
  bot:
    build:
      context: .
      args:
        COMMIT: ${COMMIT:-unknown}
        BRANCH: ${BRANCH:-unknown}
    container_name: friemon_bot
    restart: unless-stopped
    # The bot now depends on both postgres and redis being healthy
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - TZ=UTC
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - BOT_TOKEN=${BOT_TOKEN:?err_bot_token_not_set}
      # Database connection settings
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=${POSTGRES_USER:-friemon}
      - DB_PASSWORD=${POSTGRES_PASSWORD:-friemonpass}
      - DB_NAME=${POSTGRES_DB:-friemon}
      - DB_SSL_MODE=disable
      # Redis connection settings
      - REDIS_ADDR=redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - REDIS_DB=${REDIS_DB:-0}
    networks:
      - friemon_net

  # PostgreSQL service for persistent data storage
  postgres:
    image: postgres:16.3-alpine
    container_name: friemon_postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-friemon}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-friemonpass}
      POSTGRES_DB: ${POSTGRES_DB:-friemon}
    ports:
      - "127.0.0.1:5433:5432"
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    networks:
      - friemon_net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-friemon} -d ${POSTGRES_DB:-friemon}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis service for caching and transient data storage
  redis:
    image: redis:7.2-alpine
    container_name: friemon_redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    # No need to expose the Redis port to the host unless you want to connect from the host
    # ports:
    #   - "127.0.0.1:6379:6379"
    volumes:
      - ./data/redis:/data
    networks:
      - friemon_net
    # This healthcheck ensures Redis is responsive before the bot starts
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  friemon_net:
    driver: bridge
    
# Define named volumes for persistent data
volumes:
  postgres_data:
  redis_data: