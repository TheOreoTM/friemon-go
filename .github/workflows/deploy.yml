name: Friemon CI/CD Pipeline

on:
    push:
        branches:
            - main
    pull_request:
        branches:
            - main

env:
    DOCKER_IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/friemon-bot
    REGISTRY: docker.io

jobs:
    build-and-test:
        name: Build, Test, and Push Docker Image
        runs-on: ubuntu-latest
        outputs:
            image-digest: ${{ steps.build.outputs.digest }}
            image-tag: ${{ steps.commit.outputs.sha_short }}
        permissions:
            contents: read
            packages: write

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Go
              uses: actions/setup-go@v5
              with:
                  go-version: "1.22"

            - name: Cache Go modules
              uses: actions/cache@v3
              with:
                  path: ~/go/pkg/mod
                  key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
                  restore-keys: |
                      ${{ runner.os }}-go-

            - name: Install dependencies
              run: |
                  go mod download
                  go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.57.2

            - name: Run linters
              run: golangci-lint run ./...
              continue-on-error: true

            - name: Run tests
              run: go test -v ./...

            - name: Get Git commit short SHA
              id: commit
              run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Log in to Docker Hub
              if: github.event_name == 'push' && github.ref == 'refs/heads/main'
              uses: docker/login-action@v3
              with:
                  username: ${{ secrets.DOCKER_USERNAME }}
                  password: ${{ secrets.DOCKER_PASSWORD }}

            - name: Build and push Docker image
              id: build
              uses: docker/build-push-action@v5
              with:
                  context: .
                  file: ./Dockerfile
                  platforms: linux/amd64
                  tags: |
                      ${{ env.DOCKER_IMAGE_NAME }}:latest
                      ${{ env.DOCKER_IMAGE_NAME }}:${{ steps.commit.outputs.sha_short }}
                      ${{ env.DOCKER_IMAGE_NAME }}:build-${{ github.run_number }}
                  push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
                  build-args: |
                      COMMIT=${{ steps.commit.outputs.sha_short }}
                      BRANCH=${{ github.ref_name }}
                  cache-from: type=gha
                  cache-to: type=gha,mode=max

    deploy:
        name: Deploy to VPS
        runs-on: ubuntu-latest
        needs: build-and-test
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        environment: production

        steps:
            - name: Deploy to VPS via SSH
              uses: appleboy/ssh-action@v1.0.3
              with:
                  host: ${{ secrets.VPS_SSH_HOST }}
                  username: ${{ secrets.VPS_SSH_USER }}
                  key: ${{ secrets.VPS_SSH_KEY }}
                  port: 22
                  timeout: 300s
                  command_timeout: 300s
                  script: |
                      set -e
                      PROJECT_DIR="$HOME/friemon-go"
                      IMAGE_TAG="${{ needs.build-and-test.outputs.image-tag }}"
                      BUILD_NUMBER="${{ github.run_number }}"

                      echo "üöÄ Starting deployment..."
                      echo "üì¶ Using image tag: $IMAGE_TAG"
                      echo "üî¢ Build number: $BUILD_NUMBER"

                      echo "üìÅ Navigating to project directory..."
                      cd "$PROJECT_DIR"

                      if [ -f .env ]; then
                          echo "üíæ Backing up current .env..."
                          cp .env .env.backup.$(date +%Y%m%d-%H%M%S)
                      fi

                      echo "‚öôÔ∏è Creating .env file..."
                      cat > .env << EOF
                      BOT_TOKEN=${{ secrets.BOT_TOKEN }}
                      BOT_VERSION=1.0.0
                      DEV_MODE=false
                      SYNC_COMMANDS=true
                      LOG_LEVEL=info
                      LOG_FORMAT=json
                      LOG_ADD_SOURCE=false
                      LOG_OUTPUT_PATH=stdout
                      DB_HOST=postgres
                      DB_PORT=5432
                      DB_USER=friemon
                      DB_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
                      DB_NAME=friemon
                      DB_SSL_MODE=disable
                      POSTGRES_USER=friemon
                      POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
                      POSTGRES_DB=friemon
                      REDIS_ADDR=redis:6379
                      REDIS_PASSWORD=
                      REDIS_DB=0
                      PGADMIN_PASSWORD=${{ secrets.PGADMIN_PASSWORD }}
                      FRIEMON_IMAGE=${{ env.DOCKER_IMAGE_NAME }}:$IMAGE_TAG
                      TZ=UTC
                      ASSETS_DIR=./assets
                      EOF
                      echo "‚úÖ .env file created"

                      echo "üì• Pulling latest code..."
                      git fetch origin
                      git reset --hard origin/main

                      echo "üßπ Cleaning up old Docker images..."
                      docker image prune -f
                      docker system prune -f --volumes=false

                      echo "üì¶ Pulling Docker image: ${{ env.DOCKER_IMAGE_NAME }}:$IMAGE_TAG"
                      docker pull ${{ env.DOCKER_IMAGE_NAME }}:$IMAGE_TAG

                      if ! docker images | grep -q "$IMAGE_TAG"; then
                          echo "‚ùå Failed to pull image with tag $IMAGE_TAG"
                          exit 1
                      fi
                      echo "‚úÖ Image pulled successfully"

                      echo "üìù Updating docker-compose.yml to use specific image..."
                      if [ -f docker-compose.override.yml ]; then
                          rm docker-compose.override.yml
                      fi

                      cat > docker-compose.override.yml << EOF
                      version: '3.9'
                      services:
                        bot:
                          image: ${{ env.DOCKER_IMAGE_NAME }}:$IMAGE_TAG
                          pull_policy: never
                      EOF

                      echo "‚èπÔ∏è Stopping current containers..."
                      docker-compose down --remove-orphans

                      echo "üöÄ Starting new containers..."
                      docker-compose up -d --remove-orphans

                      echo "‚è≥ Waiting for PostgreSQL to be ready..."
                      timeout=60
                      counter=0
                      while ! docker-compose exec -T postgres pg_isready -U friemon -d friemon >/dev/null 2>&1; do
                          if [ $counter -eq $timeout ]; then
                              echo "‚ùå PostgreSQL failed to become ready in time"
                              docker-compose logs postgres
                              exit 1
                          fi
                          echo "Waiting for PostgreSQL... ($counter/$timeout)"
                          sleep 2
                          counter=$((counter + 1))
                      done
                      echo "‚úÖ PostgreSQL is ready"

                      echo "üîç Verifying bot container..."
                      sleep 5
                      if ! docker-compose ps | grep friemon_bot | grep -q "Up"; then
                          echo "‚ùå Bot container is not running!"
                          echo "üìã Container logs:"
                          docker-compose logs bot
                          exit 1
                      fi

                      echo "üìä Deployment Status:"
                      echo "===================="
                      docker-compose ps
                      echo ""
                      echo "üìã Recent bot logs:"
                      echo "=================="
                      docker-compose logs --tail=20 bot
                      echo ""
                      echo "‚ú® Deployment completed successfully!"
                      echo "üè∑Ô∏è Deployed image: ${{ env.DOCKER_IMAGE_NAME }}:$IMAGE_TAG"
                      echo "üî¢ Build number: $BUILD_NUMBER"
                      echo "‚è∞ Deployed at: $(date)"

            - name: Health Check
              uses: appleboy/ssh-action@v1.0.3
              with:
                  host: ${{ secrets.VPS_SSH_HOST }}
                  username: ${{ secrets.VPS_SSH_USER }}
                  key: ${{ secrets.VPS_SSH_KEY }}
                  port: 22
                  script: |
                      cd ~/friemon-go
                      echo "üè• Running health checks..."
                      sleep 10

                      if ! docker-compose ps | grep friemon_bot | grep -q "Up"; then
                          echo "‚ùå Health check failed: Bot container is not running"
                          exit 1
                      fi

                      recent_logs=$(docker-compose logs --tail=50 bot)
                      if echo "$recent_logs" | grep -i "error\|fatal\|panic"; then
                          echo "‚ö†Ô∏è Warning: Found error messages in recent logs"
                          echo "$recent_logs"
                      fi

                      echo "‚úÖ Health check passed!"

    notify:
        name: Notify Deployment Status
        runs-on: ubuntu-latest
        needs: [build-and-test, deploy]
        if: always() && github.event_name == 'push' && github.ref == 'refs/heads/main'

        steps:
            - name: Notify Success
              if: needs.deploy.result == 'success'
              run: |
                  echo "‚úÖ Deployment successful!"
                  echo "Image: ${{ env.DOCKER_IMAGE_NAME }}:${{ needs.build-and-test.outputs.image-tag }}"

            - name: Notify Failure
              if: needs.deploy.result == 'failure'
              run: |
                  echo "‚ùå Deployment failed!"
                  exit 1
